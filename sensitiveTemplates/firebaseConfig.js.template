| This is a template file. Do not edit it unless expressly asked to.
| Any programming should be done in the actualized file, which is
| simply this file copied to its correct location.
|
| The copying is done by `make init`, all you need to do is replace the
| <TEMPLATE> instances with the correct code.

/*
  WARNING: This file is not tracked by git for security reasons.
  If changes are made here, they will be reflected in the
  appropriate template file in the sensitiveTemplates directory
  when attempting a git commit.
*/

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app"
import { getDatabase, set, get, remove, ref } from "firebase/database"
import { getAuth, signInAnonymously, onAuthStateChanged } from "firebase/auth"

import { shuffleArray } from "util"
// REMOVE AFTER TESTING
// eslint-disable-next-line no-unused-vars
import { roles, stoneColours } from "gameContexts"
import { assetCards } from "AssetInfo"

// Your web app's Firebase configuration
const firebaseConfig = {
    <TEMPLATE>
}

// Initialize Firebase
const app = initializeApp(firebaseConfig)
// Initialize Realtime Database and get a reference to the service
export const database = getDatabase(app)
// Initialize anonymous authentication for player identification
export var userID
const auth = getAuth()
signInAnonymously(auth).catch((error) => {
    const errorMessage = error.message
    console.log(errorMessage)
});
onAuthStateChanged(auth, (user) => {
    if (user) {
        userID = user.uid
    }
})

/* Common Firebase functions for external use  */

// Called by clicking the "Create lobby" button in StartScreen.
// Returns true if the lobby creation was successful, false otherwise.
export const createNewLobby = async (lobbyID) => {
    let randomRoles = shuffleArray(roles)

    await set(ref(database, getLobbyRef(lobbyID)), {
        state: 0, // 0: game waiting, 1: game starting, 2: game started, 3: game ended
        players: {
            playerNum: 1,
            1: {
                userID: userID,
                name: 'Player 1',
                role: randomRoles[0],
            },
            2: {
                userID: '',
                name: 'Player 2',
                role: randomRoles[1],
            },
            3: {
                userID: '',
                name: 'Player 3',
                role: randomRoles[2],
            },
            4: {
                userID: '',
                name: 'Player 4',
                role: randomRoles[3],
            }
        },
        turnNum: 0,
        currentPlayer: 1,
        table: {
            thanos: 1, // what sector thanos is currently looking at
            infinityStones: Object.fromEntries(stoneColours.map(k => [k, 0])), // progress of stones Thanos possesses
            playerSector: 0, // what sector the current player is deployed in
        },
        cards: Array.from({length: assetCards.length}, (v,i) => { return {health: assetCards[i].maxHP} })

        /* This game object is to be hardcoded for testing assets. Delete this and uncomment
           the above version to go back to what it should be for the actual game */
        // gameEvent: '', // signal event to players
        // state: 0, // 0: game waiting, 1: game starting, 2: game started, 3: game ended
        // players: {
        //     playerNum: 2,
        //     1: {
        //         userID: userID,
        //         name: 'Player 1',
        //         cards: [captains[randomRoles[0]]], // cards in the players hand
        //         role: randomRoles[0],
        //         ready: false // signal that the player has received event (confirmation = toggle, not true)
        //     },
        //     2: {
        //         userID: '',
        //         name: 'Player 2',
        //         cards: [], // cards in the players hand
        //         role: randomRoles[1],
        //         ready: false // signal that the player has received event (confirmation = toggle, not true)
        //     },
        //     3: {
        //         userID: '',
        //         name: 'Player 3',
        //         cards: [], // cards in the players hand
        //         role: randomRoles[2],
        //         ready: false // signal that the player has received event (confirmation = toggle, not true)
        //     },
        //     4: {
        //         userID: '',
        //         name: 'Player 4',
        //         cards: [], // cards in the players hand
        //         role: randomRoles[3],
        //         ready: false // signal that the player has received event (confirmation = toggle, not true)
        //     }
        // },
        // turnNum: 0,
        // currentPlayer: 1,
        // absent: absentCards, // cards that have not yet been added to play
        // table: {
        //     thanos: 1, // what sector thanos is currently looking at
        //     infinityStones: {
        //         'orange': 1,
        //         'red': 1,
        //         'blue': 1,
        //         'purple': 0,
        //         'green': 0,
        //         'yellow': 0
        //     },
        //     playerSector: 1, // what sector the current player is deployed in
        //     sectors: {
        //         1: sector1Cards, // cards in sector 1
        //         2: sector2Cards, // cards in sector 2
        //         3: sector3Cards // cards in sector 3
        //     }
        // },
        // cards: Array.from({length: assetCards.length}, (v,i) => { return {health: assetCards[i].maxHP} }),
        // tokens: [
        //     '2heal'
        // ],
        // turn: {
        //     dice: {
        //         red: 0,
        //         blue: 0,
        //         green: 0,
        //         purple: 0
        //     },
        //     faces: [
        //         {colour: 'red', face: 'combat2'},
        //         {colour: 'blue', face: 'tech2'},
        //         {colour: 'purple', face: 'cosmic'},
        //         {colour: 'green', face: 'combat'}
        //     ],
        //     values: {
        //         combat: 1,
        //     },
        //     damageDealt: 2
        // }
    })

    return true
}

// Called by clicking the "Join Lobby" button in StartScreen. Returns the
// number of the player, or -1 if the lobby could not be joined.
export const joinLobby = async (lobbyID) => {
    let player = -1

    await getGameObject(lobbyID).then((game) => {
        if (game) {
            // Search for userID already existing in the lobbies players
            for (const [p, po] of Object.entries(game.players)) {
                if (po.userID === userID) {
                    player = parseInt(p)
                    break
                }
            }
            // If the player is not found already in the lobby
            if (player === -1) {
                let players = game.players.playerNum
                if (players < 4) {
                    player = players + 1
                    set(ref(database, `${getLobbyRef(lobbyID)}/players/${player}/userID`), userID)
                    set(ref(database, `${getLobbyRef(lobbyID)}/players/playerNum`), player)
                }
            }
        }
    })

    return player
}

// Remove a specified player from a specified lobby
export const removeFromLobby = async (lobbyID, playerID) => {
    let playersRef = ref(database, `${getLobbyRef(lobbyID)}/players`)
    get(playersRef).then((snapshot) => {
            let playersObject = snapshot.val()

            // Shift the players down
            for (let i = playerID; i < 4; i++) {
                let oldRole = playersObject[i].role
                playersObject[i] = playersObject[i+1]
                playersObject[i].role = oldRole // Otherwise, roles would disappear
                if (playersObject[i].name === `Player ${i+1}`) {
                    playersObject[i].name = `Player ${i}`
                }
            }
            // Reset player 4
            playersObject[4].userID = ''
            playersObject[4].name = 'Player 4'
            // Update database with new players object
            playersObject.playerNum--
            set(playersRef, playersObject)
        }
    )
}

// Deletes the lobby and boots all connected players
export const deleteLobby = async (lobbyID) => {
    remove(ref(database, getLobbyRef(lobbyID)))
}

// Gets all the currently available data about a game/lobby
export const getGameObject = async (lobbyID) => {
    let gameObject = await get(ref(database, getLobbyRef(lobbyID)))

    if (!gameObject.exists()) {
        return null
    }
    return gameObject.val()
}

// Make the same change in a local game object, and the RTDB game object
export const syncSetGameObject = async (lobbyID, game, valPath, newVal) => {
    let valPathArr = valPath.split('/')

    let gameIt = game
    // Used to get gameIt only to the final object reference before value
    let prevP = null
    for (let p of valPathArr) {
        if (prevP) gameIt = gameIt[prevP]
        prevP = p
    }

    gameIt[valPathArr.at(-1)] = newVal
    set(ref(database, `${getLobbyRef(lobbyID)}/${valPath}`), newVal)
}

// Returns database reference string to the given lobby
export const getLobbyRef = (lobbyID) => {
    return `games/${lobbyID}`
}
