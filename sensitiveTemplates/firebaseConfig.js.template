| This is a template file. Copy it into src/firebase.js (without this note)
| and add replace all instances of
|            <TEMPLATE>
| with the required code. This is for security reasons.
|
| The copying is done by `make init`, all you need to do is replace the
| <TEMPLATE> instances.

/*
  WARNING: This file is not tracked by git for security reasons.
  If changes are made here, they will be reflected in the
  appropriate template file in the sensitiveTemplates directory
  when attempting a git commit.
*/

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app"
import { getDatabase, set, get, ref } from "firebase/database"
import { getAuth, signInAnonymously, onAuthStateChanged } from "firebase/auth"

// Your web app's Firebase configuration
const firebaseConfig = {
    <TEMPLATE>
}

// Initialize Firebase
const app = initializeApp(firebaseConfig)
// Initialize Realtime Database and get a reference to the service
export const database = getDatabase(app)
// Initialize anonymous authentication for player identification
export var userID
const auth = getAuth()
signInAnonymously(auth).catch((error) => {
    const errorMessage = error.message
    console.log(errorMessage)
});
onAuthStateChanged(auth, (user) => {
    if (user) {
        userID = user.uid
    }
})

/* Common Firebase functions for external use  */

// Called by clicking the "Create lobby" button in StartScreen.
// Returns true if the lobby creation was successful, false otherwise.
export const createNewLobby = async (lobbyID) => {
    await set(ref(database, getLobbyRef(lobbyID)), {
        gameEvent: '', // signal event to players
        players: {
            1: {
                userID: userID,
                cards: {}, // cards in the players hand
                ready: false // signal that the player has received event (confirmation = toggle, not true)
            }
        },
        turn: 0,
        currentPlayer: 1,
        absent: {}, // cards that have not yet been added to play
        table: {
            thanos: 1, // what sector thanos is currently looking at
            sectors: {
                1: {}, // cards in sector 1
                2: {}, // cards in sector 2
                3: {} // cards in sector 3
            }
        },
        cards: {} // actual information about each card (location is specified in earlier fields)
    })

    return true
}

// Called by clicking the "Join Lobby" button in StartScreen. Returns the
// number of the player, or -1 if the lobby could not be joined.
// TODO: Handle player joining BACK into a lobby
export const joinLobby = async (lobbyID) => {
    let player = -1

    await get(ref(database, getLobbyRef(lobbyID) + '/players')).then((snapshot) => {
        if (snapshot.exists()) {
            let players = Object.keys(snapshot.val()).length
            if (players < 4) {
                player = players + 1
                set(ref(database, getLobbyRef(lobbyID) + '/players/' + player), {
                    userID: userID,
                    cards: {}, // cards in the players hand
                    ready: false // signal that the player has received event (confirmation = toggle, not true)
                })
            }
        }
    })

    return player
}

// Returns database reference string to the given lobby
export const getLobbyRef = (lobbyID) => {
    return 'games/' + lobbyID
}
